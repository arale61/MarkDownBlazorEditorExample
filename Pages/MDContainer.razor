@page "/mdcontainer"

@using BlazorApp.Data
@using Blazored.LocalStorage

@inject ILocalStorageService _localstorage;

<PageTitle>Markdown Editor</PageTitle>


<h1>Markdown Editor Example</h1>

<div>
    <br/>
    <dl>
    <dt>Blocks</dt>
    <dd>Create by blocks your <strong>Markdown</strong> file.</dd>
    <dt>Logical Structure</dt>
    <dd>Create as appropiate the blocks composing your document.</dd>
    <dt>Usage</dt>
    <dd>Inside a block you can add new lines pressing <kbd><kbd>ctrl</kbd> + <kbd>enter</kbd></kbd></dd>
    <dd>Inside a block you can add <strong>tabs</strong> pressing <kbd>tab</kbd>. <em>(todo: reset cursor position)</em></dd>
    </dl>

    <br />

    <MDEditor MDMarkdownChangedNotification="MarkdownChanged" Model="@Model" />
    <br/>

    <h2>Full Markdown code</h2>

    <br />

    <p class="text-success"><em>@lastEditedMessage</em></p>
    <p class="text-success"><em>@lastStoredLocalMessage</em></p>
    <span>
        <button @onclick="StoreToLocalStorageAsync">Store at LocalStorage</button>
        <br />
        <br />
        <button @onclick="ClearLocalStorageAsync">Clear LocalStorage</button>
        <br />
        <br />
    </span>
    <MDFullViewer Model="@Model" />
</div>

@code {   
    private MDBlockModel Model { get; set; } = new MDBlockModel(new List<MDBlock>() { new MDBlock(0,"# Test"), new MDBlock(1,"## Test 2"), new MDBlock(2,"### Test 3") });

    private string lastEditedMessage = string.Empty;

    private string lastStoredLocalMessage = string.Empty;

    private void MarkdownChanged(MDBlockModel lastMarkDown)
    {
        this.Model = lastMarkDown;
        lastEditedMessage = $"Edited on {DateTime.Now.ToLongTimeString()} at block #{lastMarkDown.LastEditedBlock?.Position}";
        @* StateHasChanged(); *@
    }

    public async void StoreToLocalStorageAsync()
    {
        await _localstorage.SetItemAsync<List<MDBlock>>("MDBlocks", Model.GetBlocks());
        lastStoredLocalMessage = $"Stored at {DateTime.Now.ToLongTimeString()}";
        StateHasChanged();
    }

    public async void ClearLocalStorageAsync()
    {
        await _localstorage.ClearAsync();
        this.Model = new MDBlockModel(new List<MDBlock>() { new MDBlock(0,"# Test"), new MDBlock(1,"## Test 2"), new MDBlock(2,"### Test 3") });
        lastStoredLocalMessage = $"Cleared at {DateTime.Now.ToLongTimeString()}";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var blocks = await _localstorage.GetItemAsync<List<MDBlock>>("MDBlocks");
            if(blocks != null)
            {
                Model.SetBlocks(blocks);
                StateHasChanged();
            }
        }
    }
}
